{%- set standby = salt['mine.get']('G@stack_id:' ~ grains.stack_id ~ ' and G@roles:hdp2.hadoop.standby-namenode', 'grains.items', 'compound') -%}
{%- set kms = salt['mine.get']('G@stack_id:' ~ grains.stack_id ~ ' and G@roles:hdp2.hadoop.kms', 'grains.items', 'compound') -%}
{%- set namenode_fqdn = salt['mine.get']('G@stack_id:' ~ grains.stack_id ~ ' and G@roles:hdp2.hadoop.namenode', 'grains.items', 'compound').values()[0]['fqdn'] -%}
{%- set zookeepers = salt['mine.get']('G@stack_id:' ~ grains.stack_id ~ ' and G@roles:hdp2.zookeeper', 'grains.items', 'compound').values() -%}
{%- if kms -%}
  {%- set kms_items = kms.values()[0] -%}
  {%- set kms_fqdn = kms_items['fqdn'] -%}
{%- endif -%}
<?xml version="1.0"?>
<configuration>
    <property>
      <name>hadoop.tmp.dir</name>
      <value>/mnt/tmp/hadoop</value>
      <final>true</final>
    </property>
    <property>
      <name>io.file.buffer.size</name>
      <value>65536</value>
    </property>
    <property>
      <name>io.compression.codecs</name>
      <value>org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.SnappyCodec</value>
    </property>
    {%- if standby %}
    <property>
      <name>fs.defaultFS</name>
      <value>hdfs://default</value>
    </property>
    <!-- set up the zookeeper quorum -->
    <property>
      <name>ha.zookeeper.quorum</name>
      <value>{% for zk in zookeepers %}{{ zk['fqdn'] }}{% if not loop.last %},{% endif %}{% endfor %}</value>
    </property>
    {%- else %}
    <property>
      <name>fs.defaultFS</name>
      <value>hdfs://{{ namenode_fqdn }}:8020/</value>
    </property>
    {%- endif %}
    <property>
      <name>fs.trash.interval</name>
      <value>1440</value>
      <final>true</final>
    </property>
    <property>
      <name>hadoop.rpc.socket.factory.class.default</name>
      <value>org.apache.hadoop.net.StandardSocketFactory</value>
      <final>true</final>
    </property>
    <property>
      <name>hadoop.rpc.socket.factory.class.ClientProtocol</name>
      <value></value>
      <final>true</final>
    </property>
    <property>
      <name>hadoop.proxyuser.oozie.hosts</name>
      <value>*</value>
    </property>
    <property>
      <name>hadoop.proxyuser.oozie.groups</name>
      <value>*</value>
    </property>
    <!-- Hue WebHDFS proxy user setting -->
    <property>
      <name>hadoop.proxyuser.hue.hosts</name>
      <value>*</value>
    </property>
    <property>
      <name>hadoop.proxyuser.hue.groups</name>
      <value>*</value>
    </property>
    <property>
      <name>hadoop.proxyuser.mapred.hosts</name>
      <value>*</value>
    </property>
    <property>
      <name>hadoop.proxyuser.mapred.groups</name>
      <value>*</value>
    </property>
    <property>
      <name>hadoop.proxyuser.hive.hosts</name>
      <value>*</value>
    </property>
    <property>
      <name>hadoop.proxyuser.hive.groups</name>
      <value>*</value>
    </property>
    <property>
       <name>dfs.client.read.shortcircuit</name>
       <value>true</value>
    </property>
{%- if salt['pillar.get']('hdp2:security:enable', False) %}
{%- from 'krb5/settings.sls' import krb5 with context %}
    <property>
      <name>hadoop.security.authentication</name>
      <value>kerberos</value>
    </property>
    <property>
      <name>hadoop.security.authorization</name>
      <value>true</value>
    </property>
    <property>
      <name>hue.kerberos.principal.shortname</name>
      <value>hue</value>
    </property>
{%- endif %}
{% if kms %}
    <property>
        <name>hadoop.security.key.provider.path</name>
        <value>kms://http@{{ kms_fqdn }}:9292/kms</value>
    </property>
{% endif %}
</configuration>
